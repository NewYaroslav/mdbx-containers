/*!\mainpage MDBX-Containers Library

Version: VERSION_PLACEHOLDER

\section intro_sec Introduction
mdbx-containers bridges standard STL containers with high-performance [libmdbx](https://github.com/erthink/libmdbx) storage. It transparently persists data in a transactional database while exposing familiar container-like interfaces.

Key features:
- Header-only usage or optional static library.
- Unified API for `KeyTable`, `KeyValueTable`, `KeyMultiValueTable`, and `AnyValueTable`.
- Automatic serialization of trivially copyable types and custom `to_bytes()`/`from_bytes()` support.
- Multiple logical tables inside one MDBX environment.
- Thread-safe operations with per-thread transactions.

\section transaction_sec Transactions
Every modifying operation runs inside a transaction. There are two ways to manage them:
- **RAII transactions** created via `Connection::transaction()`. A transaction object commits on `commit()` or rolls back on destruction. Convenient for scoped writes.
- **Manual transactions** started with `Connection::begin()` and finished with `commit()` or `rollback()`. This approach reduces overhead when grouping many operations.

Read transactions are reused per thread. Nested transactions are not supported.

\section examples_sec Examples
\subsection ex_basic Basic usage
```cpp
mdbxc::Config cfg;            // minimal config
cfg.pathname = "example.mdbx";
auto conn = mdbxc::Connection::create(cfg);
mdbxc::KeyValueTable<int, std::string> table(conn, "demo");

table.insert_or_assign(1, "one");
#if __cplusplus >= 201703L
std::optional<std::string> val = table.find(1);
if (val) std::cout << *val << std::endl;
#else
auto res = table.find_compat(1);
if (res.first) std::cout << res.second << std::endl;
#endif
```

\subsection ex_manual Manual transaction
```cpp
mdbxc::Config cfg; cfg.pathname = "manual_txn.mdbx";
auto conn = mdbxc::Connection::create(cfg);
conn->begin(mdbxc::TransactionMode::WRITABLE);

mdbxc::KeyValueTable<int, std::string> tbl(conn, "data");
tbl.insert_or_assign(10, "ten");
conn->commit();
```

\subsection ex_multitable Multiple tables
```cpp
mdbxc::Config cfg; cfg.pathname = "multi.mdbx"; cfg.max_dbs = 2;
auto conn = mdbxc::Connection::create(cfg);
mdbxc::KeyValueTable<int, std::string> a(conn, "numbers");
mdbxc::KeyValueTable<std::string, std::string> b(conn, "strings");
a.insert_or_assign(100, "hundred");
b.insert_or_assign("a", "b");
```

\section build_sec Building
Use CMake or simply include the headers and link with libmdbx.
```bash
cmake -S . -B build -DBUILD_DEPS=ON -DBUILD_STATIC_LIB=ON
cmake --build build
```

For more details on container usage and C++ version differences see \subpage tables_page.

\section config_sec Configuration Guide
Details on tuning the MDBX environment are available on \subpage config_page.

\section repo_sec Repository
Sources: [GitHub repository](https://github.com/NewYaroslav/mdbx-containers).

\section license_sec License
This project is licensed under the MIT License. It bundles libmdbx under the Apache License 2.0. See files in the repository for full texts.
*/
